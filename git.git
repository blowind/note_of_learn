
git clone http://git.forexdaily.cn/hope/admin.git

git remove -v  ##  查看当前远程仓库的地址


git add .
git commit -m "first add"
git push


git status  ##  查看当前未commit的文件的状态

git diff  filename  ##   查看"修改未添加" 与 "修改已添加" 之间的差异，带文件名时查看当前未commit的文件与库上文件的差异

git diff --cached   ##  查看"修改已添加" 与 "提交" 之间的差异

git log --stat  ##  查看最近上库记录

git show <commit-hashId>      ##   便可以显示某次提交的修改内容

git show <commit-hashId> filename  ##  显示某次提交的某个内容的修改信息


git log --pretty=oneline 文件名   ##  查看某个文件的所有历史修改记录，包括提交形成的哈希值

git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e   ##  显示该hash值下文件修改记录


git reset --hard    ##   清除本地修改
git reset --hard  <commit-hashId>  ## 清除本地commit但是未push的代码到<commit-hashId>指定的提交

git checkout -b feature_name        ## 切换本地到 feature_name 分支


git rev-parse HEAD           ##  显示最后一次修改的SHA1值
git rev-parse --short HEAD   ##  显示最后一次修改的SHA1值的短码

【将分支dev的部分修改合并到分支master】
1、查看dev上要合并的那次修改的<commit-hashId>
2、git checkout master，不做其他处理，保证本地仓库master内容与线上一致
3、git cherry-pick <commit-hashId> 将分支dev在<commit-hashId>的修改合入到主干master 



设置用户名和邮箱
git config --global user.name "username"
git config --global user.email "email"

查看设置结果
git config user.name
git config user.email



【从命令行创建一个新的仓库】

touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin http://47.96.13.113:3000/eoe/exchange_au.git
git push -u origin master


【创建git分支】
git checkout master                ## 本地切换到主干
git pull                           ## 将本地主干更新到最新
git checkout -b  exchange_au       ## 从当前本地主干拉分支 exchange_au 并切换到该分支
git push origin exchagne_au        ## 将新建的分支 exchagne_au 推送到远端
git branch --set-upstream-to=origin/exchange_au     ## 将本地的 exchange_au 关联要远端的 exchange_au
git pull

【查看分支创建信息】
git reflog show --date=iso branch_name


【删除git分支】

git branch -a        ##  显示当前所有分支
###  可以看到本地有 exchange_au 和 master 两个分支，远程有remotes/origin/exchange_au和remotes/origin/master两个分支
* exchange_au
  master
  remotes/origin/HEAD -> origin/master
  remotes/origin/exchange_au
  remotes/origin/master
  
git push origin --delete exchange_au           ## 删除远程分支 remotes/origin/exchange_au
git checkout master                            ## 本地切换到master分支
git branch -d exchange_au                      ## 删除本地的exchange_au分支

【删除提交到本地的修改】
git checkout .          #本地所有修改的。没有的提交的，都返回到原来的状态
git stash               #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。
git reset --hard HASH   #返回到某个节点，不保留修改。
git reset --soft HASH   #返回到某个节点。保留修改


【提示出错信息：fatal: remote origin already exists.】
1、先输入$ git remote rm origin
2、再输入$ git remote add origin http://47.98.142.23/eoe2.0/server/eoe-service-basic.git 就不会报错了！
3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'.我们需要修改gitconfig文件的内容
4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc
 5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了！
 
【fatal: unable to access ‘https://github.com/xingbuxing/TA-Lib-in-chinese.git/‘: OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443】 env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令
 env GIT_SSL_NO_VERIFY=true git clone https://<host_name>/git/project.git  
 
 
 
 
================================================ git flow使用 ================================================
git flow init   ## 按照git flow的流程初始化相关分支
git flow hotfix start hotfix_name   ## 从master上拉取并建立hotfix/hotfix_name分支，用于开发
git add xxx / git commit            ## 进行修改操作并commit到本地
git flow hotfix finish hotfix_name  ## 把代码合并到指定的master和dev分支
git checkout master 
git push                            ## 将commit的修改push到master
git checkout dev
git push                            ## 将commit的修改push到dev