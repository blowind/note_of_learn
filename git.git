
git clone http://git.forexdaily.cn/hope/admin.git

git remove -v  ##  查看当前远程仓库的地址


git add .
git commit -m "first add"
git push


git status  ##  查看当前未commit的文件的状态

git remote -v  ## 查看远程服务器git地址

git diff  filename  ##   查看"修改未添加" 与 "修改已添加" 之间的差异，带文件名时查看当前未commit的文件与库上文件的差异

git diff --cached   ##  查看"修改已添加" 与 "提交" 之间的差异

git log --stat  ##  查看最近上库记录

git show <commit-hashId>      ##   便可以显示某次提交的修改内容

git show <commit-hashId> filename  ##  显示某次提交的某个内容的修改信息


git log --pretty=oneline 文件名   ##  查看某个文件的所有历史修改记录，包括提交形成的哈希值

git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e   ##  显示该hash值下文件修改记录


git reset --hard    ##   清除本地修改
git reset --hard  <commit-hashId>  ## 清除本地commit但是未push的代码到<commit-hashId>指定的提交

git checkout -b feature_name        ## 切换本地到 feature_name 分支


git rev-parse HEAD           ##  显示最后一次修改的SHA1值
git rev-parse --short HEAD   ##  显示最后一次修改的SHA1值的短码

git fetch origin dev         ##  从远程dev分支获取最新版本到本地dev，不会自动merge
git log -p dev..origin/dev   ##  比较本地的dev分支和origin/dev分支的差别
git merge origin/dev         ##  将远程dev分支的代码合并到本地dev

git pull origin dev          ##  从远程获取origin/dev最新版本并merge到本地，等价于git fetch加git merge

【将分支dev的部分修改合并到分支master】
1、查看dev上要合并的那次修改的<commit-hashId>
2、git checkout master，不做其他处理，保证本地仓库master内容与线上一致
3、git cherry-pick <commit-hashId> 将分支dev在<commit-hashId>的修改合入到主干master 



【git全局设置】

1、查看当前git的全局配置(windows下是C:\Users\PICC\.gitconfig文件，linux下是~/.gitconfig文件)
	# git config --global -l
	http.proxy=http://xx.xx.xx.xx:7070
	user.name=fengxing581
	user.email=fengxing581@gmail.com
	
	在某个具体项目下查看配置
	# git config -l
	diff.astextplain.textconv=astextplain
	filter.lfs.clean=git-lfs clean -- %f
	filter.lfs.smudge=git-lfs smudge -- %f
	filter.lfs.process=git-lfs filter-process
	filter.lfs.required=true
	http.sslbackend=openssl
	http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
	core.autocrlf=true
	core.fscache=true
	core.symlinks=false
	http.proxy=http://34.1.32.251:7070
	user.name=root
	user.email=fengxing581@gmail.com
	core.repositoryformatversion=0
	core.filemode=false
	core.bare=false
	core.logallrefupdates=true
	core.symlinks=false
	core.ignorecase=true
	remote.origin.url=https://github.com/blowind/note_of_learn.git
	remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
	branch.master.remote=origin
	branch.master.merge=refs/heads/master
	

2、设置用户名、邮箱、代理
	# git config --global user.name "username"
	# git config --global user.email "email"
	# git config --global http.proxy http://127.0.0.1:1080   ## 配置http代理，此处ip和端口明显是配置shadowsocks代理
	# git config --global https.proxy http://127.0.0.1:1080  ## 配置https代理，此外还支持sockets5，格式为sockets5://
	
	取消代理
	# git config --global --unset http.proxy
	# git config --global --unset https.proxy 

3、查看设置结果
	# git config user.name
	# git config user.email

4、修改git显示编码格式
	# git config --global gui.encoding utf-8
	# git config --global i18n.logoutputencoding utf-8

5、忽略某个文件，不检查冲突和更新
	# git update-index --assume-unchanged /master/text.txt(指定文件路径)       #强制忽略跟踪
	# git update-index --no-assume-unchanged /master/text.txt(指定文件路径)    #恢复强制忽略跟踪


拉取一个需要用户名密码的新仓库

git clone http://'root':'paswxxx'@47.101.135.231/root/picc-one.git

git clone http://root:1qaz2wsx#$picc@47.101.135.231/root/picc-one.git
git clone http://'root':'1qaz2wsx#$picc'@47.101.135.231/root/picc-one.git
git clone http://47.101.135.231/root/picc-one.git


【git每次操作免输入用户名密码的方法】
1、在%HOME%目录中，一般为C:\users\Administrator，也可以是你自己创建的系统用户名目录，反正都在C:\users\中。文件名为.git-credentials,由于在Window中不允许直接创建以"."开头的文件，所以需要借助git bash进行，打开git bash客户端，进行%HOME%目录，然后用touch创建文件 .git-credentials, 用vim编辑此文件，具体操作如下，其中第三步是.git-credentials文件内存放内容：
touch .git-credentials
vim .git-credentials
https://{username}:{password}@github.com

2、进入git bash终端， 输入如下命令：
git config --global credential.helper store
执行完后查看%HOME%目录下的.gitconfig文件，会多了一项：
[credential]
	helper = store

3、重新开启git bash会发现git push时不用再输入用户名和密码


【从命令行创建一个新的仓库】

touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin http://47.96.13.113:3000/eoe/exchange_au.git
git push -u origin master


【创建git分支】
git checkout master                ## 本地切换到主干
git pull                           ## 将本地主干更新到最新
git checkout -b  exchange_au       ## 从当前本地主干拉分支 exchange_au 并切换到该分支
git push origin exchagne_au        ## 将新建的分支 exchagne_au 推送到远端
git branch --set-upstream-to=origin/exchange_au     ## 将本地的 exchange_au 关联要远端的 exchange_au
git pull


【gitlab创建仓库并在本地填充内容】
git clone http://gitlab.xxxx.com/xxxx_java/xxx-center.git
cd xxx-center
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

【已写好代码但未绑定git，推到指定git仓库的方法】
cd existing_folder
git init
git remote add origin http://gitlab.xxx.com/xxxx_java/xxx-center.git
git add .
git commit -m "Initial commit"
### git判断remote仓库和本地仓库没有共同的commit所以不让提交，认为是写错了origin，
### 此时先pull远程仓库已有内容，使用--allow-unrelated-histories告诉git允许不相关历史合并
git pull origin master --allow-unrelated-histories    
git push -u origin master

【已有git仓库，将代码传到新仓库】
cd existing_repo
git remote rename origin old-origin
git remote add origin http://gitlab.xxxx.com/xxxx_java/xxx-center.git
git push -u origin --all
git push -u origin --tags


【查看分支创建信息】
git reflog show --date=iso branch_name

【本地内容与远程分支冲突时的合并】
git stash
git pull
git unstash

## IDEA中操作
git -> Stash Changes ->  输入Message标记本次Stash  ->Create Stash
git pull
git -> Unstash Changes -> 指定冲突文件中留下的部分apply


【删除git分支】

git branch -a        ##  显示当前所有分支
###  可以看到本地有 exchange_au 和 master 两个分支，远程有remotes/origin/exchange_au和remotes/origin/master两个分支
* exchange_au
  master
  remotes/origin/HEAD -> origin/master
  remotes/origin/exchange_au
  remotes/origin/master
  
git push origin --delete exchange_au           ## 删除远程分支 remotes/origin/exchange_au
git checkout master                            ## 本地切换到master分支
git branch -d exchange_au                      ## 删除本地的exchange_au分支

【删除提交到本地的修改】
git checkout .          #本地所有修改的。没有的提交的，都返回到原来的状态
git stash               #把所有没有提交的修改暂存到stash里面。可用git stash pop恢复。
git reset --hard HASH   #返回到某个节点，不保留修改。
git reset --hard HEAD   # 退回到线上最新

git reset --soft HASH   #返回到某个节点。保留修改


【You have not concluded your merge (MERGE_HEAD exists) 保留本地修改的处理，然后pull远程的代码保存到本地，然后和本地代码一起commit/push】
git merge --abort
git reset --merge
git commit .
git pull

【You have not concluded your merge (MERGE_HEAD exists) 下载线上代码,抛弃本地的修改】
git fetch --all
git reset --hard origin/master
git fetch         // 从远程分支获取最新版本到本地本分支，不会自动merge



【提示出错信息：fatal: remote origin already exists.】
1、先输入$ git remote rm origin
2、再输入$ git remote add origin http://47.98.142.23/eoe2.0/server/eoe-service-basic.git 就不会报错了！
3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'.我们需要修改gitconfig文件的内容
4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc
 5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了！
 
【fatal: unable to access ‘https://github.com/xingbuxing/TA-Lib-in-chinese.git/‘: OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443】 env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令
 env GIT_SSL_NO_VERIFY=true git clone https://<host_name>/git/project.git  
 
 
 
 
================================================ git flow使用 ================================================
git flow init   ## 按照git flow的流程初始化相关分支
git flow hotfix start hotfix_name   ## 从master上拉取并建立hotfix/hotfix_name分支，用于开发
git add xxx / git commit            ## 进行修改操作并commit到本地
git flow hotfix finish hotfix_name  ## 把代码合并到指定的master和dev分支
git checkout master 
git push                            ## 将commit的修改push到master
git checkout dev
git push                            ## 将commit的修改push到dev