
####  全局配置部分

#user  nobody;

worker_processes  1;         ### 指定工作线程数为1
# worker_processes auto;       ### 由nginx根据内核数自己选取工作线程数


#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


####   nginx工作模式配置，影响nginx服务器或与用户的网络连接
events {
    worker_connections  1024;         ### nginx工作线程
}


####  http设置，可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。
http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /data/logs/nginx/access.log;
    error_log   /data/logs/nginx/error.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

	gzip off;  ## 默认值，可省略，此处配置服务端支持gzip功能的开关
    # gzip  on;   ## 如果开启，返回的response header中会包含 Content-Encoding: gzip
	# gzip_http_version  1.1;   ## 启用gzip所需的HTTP最低版本, 默认值为HTTP/1.1（用于HTTP1.0中开启长连接和gzip只能二选一，ng默认开始chunked长连接）
	# gzip_comp_level  5;       ## 压缩级别，级别越高压缩率越大，当然压缩时间也就越长，默认值为 1，压缩级别取值为1-9
	# gzip_min_length  1000;    ## 设置允许压缩的页面最小字节数，Content-Length小于该值的请求将不会被压缩，默认值:0，当设置的值较小时，压缩后的长度可能比原文件大
	## 要采用gzip压缩的文件类型(MIME类型)， 默认值:text/html(默认不压缩js/css)
	# gzip_types   text/csv text/xml text/css text/plain text/javascript application/javascript application/x-javascript application/json application/xml;
	
	##################      基本服务器配置          #######################

	####  主机配置，配置虚拟主机的相关参数，一个http中可以有多个server
    server { 
		server_name  image.yimiaozhongyi.com;
        listen       80;
        
        #charset koi8-r;
        #access_log  logs/host.access.log  main;


		####  location配置请求的路由，以及各种页面的处理情况
		
		## 
        location / {
            root   html;
            index  index.html index.htm;
        }

        location /images/ {
            root /mnt/;
        }

        #error_page  404              /404.html;

		
        # 根据服务器错误码重定向到静态错误页面 /50x.html 注意此处是等号
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
			#指定html静态页面在服务器里的文件路径。
			root /root/static/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
	
	##################      带负载均衡的服务器配置          #######################
	
	
	#### 负载均衡配置，配置后端服务器具体地址，负载均衡配置不可或缺的部分，根据配置分配不同权重的流量
	upstream balanceServer {
		# 默认使用轮询策略  ##  将所有客户端请求轮询分配给服务端。如果其中某一台服务器压力太大，出现延迟，会影响所有分配在这台服务器下的用户
		# least_conn;  ##  最小连接数策略, 将请求优先分配给压力较小的服务器，它可以平衡每个队列的长度，并避免向压力大的服务器添加更多的请求。
		# fair;        ##  最快响应时间策略, 依赖于NGINX Plus，优先分配给响应时间最短的服务器。
		# ip_hash;     ##  客户端ip绑定, 来自同一个ip的请求永远只分配一台服务器，有效解决了动态网页存在的session共享问题。
		server 10.1.22.33:12345;
		server 10.1.22.34:12345;
		server 10.1.22.35:12345;
	}
	
	server {
		server_name  www.baidu.com;
		listen 80;
		location /api {
			proxy_pass http://balanceServer;  ## 此处通过负载均衡指定分配到后端具体服务器的流量
		}
	}
	
	##################      跨域示例          #######################
	## 完美绕过浏览器同源策略，对浏览器来说都是请求的fe.server.com，此处dev.server.com依然可以对外提供服务
	server {
        listen       80;
        server_name  fe.server.com;        #  客户端请求的域名地址fe.server.com
        location / {
                proxy_pass dev.server.com;   #  后台实际提供服务的域名地址dev.server.com
        }
	}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}



#####################       常见内置全局变量，可以在配置的任何位置使用    #######################################
$host	            请求信息中的Host，如果请求中没有Host行，则等于设置的服务器名
$request_method	    客户端请求类型，如GET、POST
$remote_addr	    客户端的IP地址
$args	            请求中的参数
$content_length	    请求头中的Content-length字段
$http_user_agent	客户端agent信息
$http_cookie	    客户端cookie信息
$remote_addr	    客户端的IP地址
$remote_port	    客户端的端口
$server_protocol	请求使用的协议，如HTTP/1.0、·HTTP/1.1`
$server_addr	    服务器地址
$server_name	    服务器名称
$server_port	    服务器的端口号