##  upstream模块控制HTPP服务的负载均衡，形成一个HTTP服务池，此处在80端口上给两个HTPP服务器做负载均衡
upstream backend {
	##  设定http服务池使用最少连接优先算法
	least_conn;              
	##  least_time;            最小平均响应时间优先算法(收费配置)
	##  hash  consistent;      hash映射优先，根据request内容计算的hash值指向最可能缓存了被请求结果的server
	##  ip_hash;           取请求ip来进行哈希，保证同一客户端的请求都代理到同一个server，在会话敏感并且会话未被共享的应用有效
	
	zone backends 64k;      ##  (收费)设置共享内存区，用于工作进程共享每个server处理连接数和缓存队列请求数信息
	##  (收费)配合最大连接数使用，最大缓存750个超出最大连接数的请求，队列里每个请求的最大超时时间是30秒(默认60秒)
	queue 750 timeout=30s   
	
	## 池中每个目的地用server定义
	server 10.10.12.45:80   weight=1;         ###  max_conns=25;  限制最大连接数(收费配置)
	server app.example.com:80  weight=2;       ### 表明本服务器处理的连接数设定为前者的2倍，不设置时weight默认为1
	
	# (收费)配置ng创建并追踪cookie，第一个参数配为cookie，在第一个请求到来时生成cookie并保证后续请求转发给同一个server
	sticky  cookie 
	        affinity    ## cookie取名为affinity
			expires=1h  ##  保留1小时
			domain=.example.com     ## 针对域名.example.com的请求
			httponly        ##  不能被客户端消费 
			secure          ## 必须通过HTTPS发送
			path=/;         ## 对所有路径有效
		
	# 追踪后台server创建的cookie，并在后序请求中根据对应cookie分发请求
	sticky  learn
			create=$upstream_cookie_cookiename
			lookup=$cookie_cookiename
			zone=client_sessions:2m;
}

server {
	location / {
		proxy_pass  http:/backend;
		
		proxy_set_header Host $http_host;   ## 设置HTTP HEADER中的Host
		proxy_set_header X-Real-IP $remote_addr;   ##  设置HTTP请求的来源IP，只有本代理是对外第一个代理时才有效，否则得到的是上一个代理的IP
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   ##  多个代理跳转时，X-Forwarded-For跳转信息接棒传递
		proxy_set_header X-Forwarded-Proto $scheme;   ##  X-Forwarded协议头
		
		##  防止客户端通过设置X-Forwarded-For破坏原始ip地址读取的方法，限定real ip的来源和获取方式
		set_real_ip_from 127.0.0.1;         ## 表示从何处获取真实IP(解决安全问题，只认可自己信赖的IP)，可以是IP或子网等， 可以设置多个set_real_ip_from。
        real_ip_header  X-Forwarded-For;   ## 表示从哪个header属性中获取真实IP
        real_ip_recursive on;               ##  递归检索真实IP，若从 X-Forwarded-For 中获取，则需递归检索；若像从X-Real-IP中获取，则无需递归
	}
}

## stream模块配置TCP服务器的负载均衡
stream {
	upstream mysql_read {
		server read1.example.com:3306  weight=5;
		server read2.example.com:3306;
		server 10.10.12.34:3306   backup;
	}
	
	## 配置监听服务器
	server {
		listen 3306;       ## 监听3306端口上的TCP连接
		proxy_pass mysql_read;
	}
}

##  使用 map 从两个变量中提取符合正则表达式要求的值到 $route 中
map $cookie_jsessionid $route_cookie {
	~.+\.(?P<route>\w+)$ $route;
}

##  使用 map 从两个变量中提取符合正则表达式要求的值到 $route_uri 中
map $request_uri $route_uri {
	~jsessionid=.+\.(?P<route>\w+)$ $route;
}

upstream backend {
	server backend1.example.com  route=a;
	server backend2.example.com  route=b;
	
	## route参数接收任意个后序参数，第一个不为空的参数即是路由的目标
	sticky route $route_cookie $route_uri;
}