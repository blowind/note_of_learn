<?xml version="1.0" encoding="UTF-8" ?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
		 version="3.0">

	<!-- 在Web容器启动时，web.xml的加载顺序一般是这样的: context-param ->listener -> filter -> servlet   -->
	
	<!-- 以下内容配置时可选	  -->
	<web-app>    
		<display-name>定义了WEB应用的名字</display-name>    
		<description>声明WEB应用的描述信息</description>
	</web-app>

		 
	<!-- 上下文参数，这类配置重在	  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:applicationContext.xml</param-value>
	</context-param>
	


	<!-- 当配置了多个监听器时，监听器的执行先后顺序是按照web.xml里面定义的先后顺序来执行的 -->
	
	<!-- 	
	Servlet API中定义了8个监听器接口，用于监听ServletContext、HttpSession、ServletRequest对象的生命周期事件以及对象属性改变事件：
	1、javax.servlet.ServletContextListener               Servlet上下文对象初始化或者销毁时通知回调，必配web.xml
	2、javax.servlet.ServletContextAttributeListener      Servlet上下文属性列表发生变化时通知回调，必配web.xml
	3、javax.servlet.http.HttpSessionListener             Session创建或者销毁时通知回调，必配web.xml
	4、javax.servlet.http.HttpSessionActivationListener   实现本接口的对象，绑定到Session中，在Session被钝化或者激活时，对象通知回调，必配web.xml
	5、javax.servlet.http.HttpSessionAttributeListener    Session属性列表发生改变时得到通知，必配web.xml
	6、javax.servlet.http.HttpSessionBindingListener      实现接口的对象绑定到Session或者从Session删除时通知回调，监控的是整个类作为Session键值对中的值增删时的变化，无需单独配置
	7、javax.servlet.ServletRequestListener               request对象初始化或者销毁时通知回调，必配web.xml
	8、javax.servlet.ServletRequestAttributeListener      request对象属性发生改变时通知回调，必配web.xml
 	-->

	<listener>
		<listener-class>org.zxf.MyServletContextListener</listener-class>
	</listener>
	<!-- 
	【作用及关联】
	加载 Spring 配置文件并生成相应上下文
	ContextLoaderListener 监听容器初始化事件，初始化一个根上下文 applicationContext ，即《Spring的上下文》
	该上下文会根据 context-param 配置指向的 bean 文件生成加载所有 bean 并作为其上下文

	1、对于一个web应用，web容器提供一个全局context供其使用，这个context就是 servletContext ，为其后续的spring IoC容器提供宿主环境。
	
	2、web容器启动时会触发容器初始化事件， ContextLoaderListener 会监听这个事件，初始化一个根上下文即 WebApplicationContext
	   实现类为 XmlWebApplicationContext ，这个就是Spring的IoC容器，
	   spring以 org.springframework.web.context.WebApplicationContext 的 ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE 变量值作为key 
	   将前述 WebApplicationContext 存储到 servletContext 中
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>



	<!-- 	当请求资源匹配多个 filter-mapping 时，filter 拦截资源是按照 filter-mapping 配置节出现的顺序来依次调用 doFilter() 方法的 -->
	
	<!-- 添加编码过滤器，强制所有进入文本都按照 UTF-8 编码 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
		  <param-name>encoding</param-name>
		  <param-value>UTF-8</param-value>
		</init-param>
		<init-param>
		  <param-name>forceEncoding</param-name>
		  <param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

    <!-- 自己实现的类似功能的过滤器 -->
	<filter>
		<filter-name>urlFilter</filter-name>
		<filter-class>web.filter.UrlFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>urlFilter</filter-name>
		<!-- 指定需要过滤的url的类型 -->
		<url-pattern>/*</url-pattern>
		<!-- 指定需要过滤的servlet名字 -->
		<servlet-name>*</servlet-name>
		<!-- 指定过滤的场景，默认不配置时为REQUEST -->
		<dispatcher>REQUEST</dispatcher>    <!-- 匹配直接访问情况 -->
		<dispatcher>INCLUDE</dispatcher>    <!-- 匹配通过 RequestDispatcher.include() 方法访问场景 -->
		<dispatcher>FORWARD</dispatcher>    <!-- 匹配通过 RequestDispatcher.forward() 方法访问场景 -->
		<dispatcher>ERROR</dispatcher>      <!-- 匹配目标资源通过声明式异常处理机制调用场景 -->
	</filter-mapping>

	
	
	<!-- 
	【作用及关联】
	加载 Spring mvc 配置文件并生成相应的上下文，通过其下的 init-param 指定
	
	3、 DispatcherServlet 在初始化会建立自己的IoC容器用以持有Spring mvc相关的 bean ，它在建立的时候会通过
	org.springframework.web.context.WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE 为key从 servletContext 
	中获取根上下文作为自己上下文的父上下文，它的实现类也是 XmlWebApplicationContext 	
	在建立之后会以和自己 servlet-name 便签有关的名称存储在 servletContext 中（例如示例情况选择的key就是 hessianServlet），
	这样每个servlet就拥有自己独立的bean及根上下文共享的bean
	-->
	<servlet>
		<!-- 默认未指定配置文件时，此处的 servlet-name 用作同目录下 mvc bean 配置文件的文件名，命名规范 servlet-name-servlet.xml -->
		<servlet-name>DispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--  使用参数指定 dispatcher servlet 的配置文件，则相关的mvc bean不必放在web.xml目录下的 servlet-name-servlet.xml文件中
		<init-param> 
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/hessian-spring.xml</param-value>
			或者
			<param-value>/WEB-INF/config/myservlet-spring.xml</param-value>
		</init-param>
		-->
		
		<!--  缺省情况下spring mvc 将加载 当前系统中所有实现了HandlerMapping接口的bean，
			  此处置为false时，spring mvc将查找名 为“handlerMapping”的bean并作为当前系统中唯一的handlermapping。
			  如果没有定义handlerMapping的话，则spring mvc将按照org.springframework.web.servlet.DispatcherServlet
			  所在目录下的 DispatcherServlet.properties中所定义的org.springframework.web.servlet.HandlerMapping
			  的内容来加载缺省的handlerMapping
		<init-param>   
			<param-name>detectAllHandlerMappings</param-name>  
			<param-value>false</param-value>  
		</init-param>
		-->
		
		<!--  作用和detectAllHandlerMappings类似，只不过作用对象为handlerAdapter
		<init-param>   
			<param-name>detectAllHandlerAdapters</param-name>  
			<param-value>false</param-value>  
		</init-param>  
		-->
		
		<!-- 当属性detectAllViewResolvers设置为false时，spring mvc将查找名为viewResolver的bean 来作为当前唯一的ViewResolver 
		<init-param>  
			<param-name>detectAllViewResolvers</param-name>  
			<param-value>false</param-value>  
		</init-param> 
		-->
		<!-- 有本配置的是自启动servlet，即配置的话在应用程序启动时装载servlet，若不配置，则在该servlet第一次请求时加载 -->
		<load-on-startup>1</load-on-startup>   
	</servlet>
 	<servlet-mapping>
 		<servlet-name>DispatcherServlet</servlet-name>
		<!-- 此处配置 /* 将匹配所有请求而导致所有jsp和静态内容都无法正常显示，而 / 只匹配缺省的servlet -->
 		<url-pattern>/</url-pattern>
 	</servlet-mapping>
		 
 </web-app>