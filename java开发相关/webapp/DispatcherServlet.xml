<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-4.0.xsd">
			
	<!-- 
	本文件是spring mvc上下文加载的bean文件，主要配置每个servlet相关的bean (@Controller 注解) ，例如视图解析器，拦截器，文件上传解析器 
	可以通过web.xml里 DispatcherServlet 参数 init-param contextConfigLocation 指定，
	如果不指定，则名字必须为本文件名 dispatcher-servlet.xml 并且必须放在 web.xml 相同的路径下
	-->
	
	<!-- 设置控制器的包名，自动递归扫描的路径查找旗下  -->
	<context:component-scan base-package="web.controller" />
	<!-- 在前述配置指定的路径下扫描注册 @Controller 注解的 bean 对象 -->
	<mvc:annotation-driven/>
	<!-- 指示需要单独处理的静态资源，这些资源不经过 DispatcherServlet ，
	     此处第一个配置指示/css下的所有文件课件，第二个允许显示所有.html文件  -->
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/*.html" location="/" />
	
	
	<!-- 添加过滤器，用来对传入的参数进行过滤处理，具体哪些入参会进行过滤根据实现bean的泛型类型进行匹配 -->
	<mvc:annotation-driven conversion-service="conversionService" />
	<!-- 使用工厂方法生成所有过滤器的bean，供前述mvc注解驱动扫描 -->
	<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
			<!-- 此处列出所有的过滤器bean -->
            <list>
				<!-- 列出本地具体过滤器bean的实现类，若通过构造函数初始化bean，则写明入参，也可以通过setter初始化 -->
                <bean class="converter.StringToLocalDateConverter">
                    <constructor-arg type="java.lang.String" value="MM-dd-yyyy" />
                </bean>
            </list>
        </property>
    </bean>
	
	
	<!-- 添加格式化转换器，也是用来处理入参，但是限制入参只能是String类型，转换结果类型可以通过接口的泛型指定 
		 本工厂bean可以用formatters属性注册formatter，同时用converters属性注册converter-->
	<context:component-scan base-package="formatter"/>
    <mvc:annotation-driven conversion-service="conversionService"/>
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="formatters">
			
            <!-- 指定格式化器 -->
			<set>
                <bean class="formatter.LocalDateFormatter">
                    <constructor-arg type="java.lang.String" value="MM-dd-yyyy"/>
                </bean>
            </set>
        </property>
 		<!-- <property name="converters">
				<list><bean /></list>
			 </property>  -->
    </bean>
	
	<!-- 使用Registrar注册formatter，由于所有的formatter对象都会在 MyFormatterRegistrar 实现中放入，
	     因此不需要 component-scan，此种写法只是省掉了xml里面的扫描配置，formatter实现类LocalDateFormatter不能省略 -->
	<mvc:annotation-driven conversion-service="conversionService"/>
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="formatterRegistrars">
            <set>
                <bean class="formatter.MyFormatterRegistrar">
                    <constructor-arg type="java.lang.String" value="MM-dd-yyyy"/>
                </bean>
            </set>
        </property>
    </bean>
	
			
</beans>