<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC
				"-//mybatis.org//DTD Mapper 3.0//EN"
				"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zxf.zxfbatis.simple.mapper.UserMapper">
	<resultMap id="userMap" type="com.zxf.zxfbatis.simple.model.SysUser">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>

	<select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>

	<select id="selectAll" resultType="com.zxf.zxfbatis.simple.model.SysUser">
		select id,
			user_name userName,
			user_password userPassword,
			user_email userEmail,
			user_info userInfo,
			head_img headImg,
			create_time createTime
		from sys_user
	</select>

	<select id="selectRolesByUserId" resultType="com.zxf.zxfbatis.simple.model.SysRole">
		select r.id,
					 r.role_name,
					 r.enabled,
					 r.create_by,
					 r.create_time,
					 u.user_name as "user.userName",
					 u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{userId}
	</select>

	<insert id="insert">
		insert into sys_user(id, user_name, user_password, user_email, user_info, head_img, create_time)
		VALUES (
		#{id}, #{userName}, #{userPassword}, #{userEmail},
		#{userInfo}, #{headImg, jdbcType=BLOB},
		#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>

	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
		user_name, user_password, user_email, user_info,
		head_img, create_time
		)values(
		#{userName}, #{userPassword}, #{userEmail},
		#{userInfo}, #{headImg, jdbcType=BLOB},
		#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>

	<insert id="insert3">
		insert into sys_user(
			user_name, user_password, user_email,
			user_info, head_img, create_time
		)values(
			#{userName}, #{userPassword}, #{userEmail},
			#{userInfo}, #{headImg, jdbcType=BLOB},
			#{createTime, jdbcType=TIMESTAMP}
		)
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<update id="updateById">
		update sys_user SET
		user_name = #{userName},
		user_password = #{userPassword},
		user_email = #{userEmail},
		user_info = #{userInfo},
		head_img = #{headImg, jdbcType=BLOB},
		create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}
	</update>

	<delete id="deleteById">
		delete from sys_user where id = #{id}
	</delete>

	<select id="selectRolesByUserIdAndRoleEnabled"
			resultType="com.zxf.zxfbatis.simple.model.SysRole">
		SELECT
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		FROM sys_user u
		inner JOIN sys_user_role ur on u.id = ur.user_id
		INNER  JOIN sys_role r on ur.role_id = r.id
		where u.id = #{userId} and r.enabled = #{enabled}
	</select>

	<select id="selectByUser" resultType="com.zxf.zxfbatis.simple.model.SysUser">
		select id, user_name, user_password, user_email, user_info, head_img,
		create_time
		from sys_user
		<where>
			<if test="userName != null and userName != ''">
				<bind name="userNameLike" value="'%' + userName + '%'"/>
				and user_name like #{userNameLike}
			</if>
			<if test="userEmail != null and userEmail != ''">
				and user_email = #{userEmail}
			</if>
		</where>
	</select>

	<update id="updateByIdSelective">
		update sys_user
		<set>
		<if test="userName != null and userName != ''">
			user_name = #{userName},
		</if>
		<if test="userPassword != null and userPassword != ''">
			user_password = #{userPassword},
		</if>
		id = #{id}
		</set>
		where id = #{id}
	</update>

	<select id="selectByIdOrUserName" resultType="com.zxf.zxfbatis.simple.model.SysUser">
		select id, user_name, user_password, user_email, user_info, head_img, create_time
		from sys_user
		where 1 = 1
		<choose>
			<when test="id != null">
				and id = #{id}
			</when>
			<when test="userName != null and userName != ''">
				and user_name = #{userName}
			</when>
			<otherwise>
				and 1 = 2
			</otherwise>
		</choose>
	</select>

	<select id="selectByIdList" resultType="com.zxf.zxfbatis.simple.model.SysUser">
		SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
		FROM sys_user
		where id IN
		<foreach collection="list" open="(" close=")" separator="," item="id" index="i">
			#{id}
		</foreach>
	</select>

	<insert id="insertList" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
		user_name, user_password, user_email,
		user_info, head_img, create_time
		)VALUES
		<foreach collection="list" item="user" separator=",">
			(
			#{user.userName}, #{user.userPassword}, #{user.userEmail},
			#{user.userInfo}, #{user.headImg, jdbcType=BLOB},
			#{user.createTime, jdbcType=TIMESTAMP}
			)
		</foreach>
	</insert>

	<update id="updateByMap">
		update sys_user
		SET
		<foreach collection="_parameter" item="val" index="key" separator=",">
			${key} = #{val}
		</foreach>
		where id = #{id}
	</update>
</mapper>