<?xml version="1.0" encoding="UTF-8"?>
<!-- 对于mybatis功能配置文件，此处校验空间都是config，映射文件都是mapper -->
<!DOCTYPE configuration 
			PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
			"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<!-- ================================================================ -->
	<!-- 以下配置项的顺序不能颠倒，否则启动阶段会有异常，导致程序无法运行 -->
	<!-- ================================================================ -->

	<!-- 属性 -->
	<properties>
		<!-- 在本文件的其他地方可以使用${database.driver}引用该值 -->
		<property name="database.driver" value="com.mysql.jdbc.Driver"/>
		<property name="database.url" value="jdbc:mysql://localhost:3306/ssm"/>
		<property name="database.username" value="root"/>
		<property name="database.password" value="123456"/>
	</properties>
	<!-- 将配置放在.properties文件中(classpath路径下)并在本文件引用的方式 -->
	<properties resource="jdbc.properties"/>

	<!-- 设置 -->
	<settings>
		<!-- 指定使用LOG4J输出日志 -->
		<setting name="logImpl" value="LOG4J"/>
		<!-- 自动将下划线方式命名的数据库列映射到Java对象的驼峰式域变量名上 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>


		<!-- 影响所有映射器中配置缓存的全局开关，默认为true -->
		<settings name="cacheEnabled" value="true"/>

		<!-- 延迟加载的全局开关，开启时所有关联对象都会延迟加载，默认为false -->
		<settings name="lazyLoadingEnabled" value="false"/>
		<!-- 启用时对任意延迟属性的调用会使带有延迟加载属性的对象完整加载，否则按需加载，3.4.1版本后默认为false -->
		<setting name="aggressiveLazyLoading" value="false"/>


	</settings>

	<!-- 类型别名，在MyBatis中别名不区分大小写，所以别名一般都小写，本身小写的情况下加前缀下划线 -->
	<typeAliases>
		<!-- 指定DAO领域类的全限定名前缀，MyBatis会扫描这个包里的所有类，将其第一个字母变小写后作为其别名 -->
		<package name="tk.mybatis.simple.model"/>
		<!-- 指定单个的POJO对象别名，用于xml中省去路径直接指代，与上述包名省略功能互斥 -->
		<!-- <typeAlias type="com.zxf.zxfbatis.simple.model.Country" alias="country"/> -->
	</typeAliases>

	<!-- 类型处理器 -->
	<!-- 用于jdbcType和javaType类型之间的相互转换，多用于自定义枚举类或者数据库使用特殊数据类型的场景 -->
	<typeHandlers>
		<!--配置typeHandler，当jdbcType和javaType能与typeHandler处理的内容对应时，
		    启动MyTypeHandler处理-->
		<typeHandler jdbcType="VARCHAR" javaType="string"
								 handler="com.zxf.zxfbatis.simple.handler.MyTypeHandler"/>
		<!-- 使用包扫描的方式，指定该路径下所有的typeHandler，其中的jdbcType和javaType在类定义中通过注解指定 -->
		<package name="com.zxf.zxfbatis.simple.handler"/>
	</typeHandlers>

	<!-- 对象工厂，不常用 -->
	<objectFactory type="com.zxf.zxfbatis.simple.factory.MyObjectFactory">
		<property name="prop1" value="value1"/>
	</objectFactory>

	<!-- 插件 -->
	<plugins>
	</plugins>


	<!-- 配置环境 -->
	<environments default="development">
		<!-- 环境变量 -->
		<environment id="development">


			<!-- 事务管理器 -->
			<!-- MyBatis为Transaction提供了两个实现类：
				   JdbcTransaction和ManagedTransaction，实现TransactionFactory接口 -->
			<!-- JdbcTransaction以JDBC的方式对数据库的提交和回滚进行操作 -->
			<transactionManager type="JDBC">
				<property name="" value=""/>
			</transactionManager>

			<!-- ManagedTransaction的提交和回滚不用任何操作，而是把事务交给容器处理
				 默认情况下回关闭连接 -->
			<!-- <transactionManager type="MANAGED"> -->

			<!-- 使用自定义的事务管理器 -->
			<!-- <transactionManager type="com.zxf.zxfbatis.simple.transaction.MyTransactionFactory"/> -->



			<!-- 数据源 -->
			<!-- 使用UnpooledDataSourceFactory、PooledDataSourceFactory和JndiDataSourceFactory
				 三个工厂类来提供DataSource连接对象，分别对应UNPOOLED、POOLED、JNDI三个配置 -->
			<dataSource type="UNPOOLED">
				<property name="driver" value="com.mysql.jdbc.Driver"/>
				<property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
				<property name="username" value="root"/>
				<property name="password" value=""/>

				<!-- 通过点分属性的方式给数据库驱动传属性，此处传递值为UTF8的encoding属性给数据库驱动
				     实际是调用DriverManager.getConnection(url, driverProperties)方法传递 -->
				<property name="driver.encoding" value="UTF8"/>
			</dataSource>

			<dataSource type="POOLED">
				<property name="driver" value="com.mysql.jdbc.Driver"/>
				<property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
				<property name="username" value="root"/>
				<property name="password" value=""/>

				<!-- 以下设置可选，下面填的value都是默认值 -->
				<!-- 维持的最大活动连接数 -->
				<property name="poolMaximumActiveConnections" value="10"/>
				<!-- 最大空闲连接数 -->
				<property name="poolMaximumIdleConnections" value="?"/>
				<!-- 被强制返回前，池中连接被checkout的时间，单位毫秒 -->
				<property name="poolMaximumCheckoutTime" value="20000"/>
				<!-- 如果获取连接花费时间过长，打印状态日志，并重新尝试获取一个连接，设置这期间间隔，单位毫秒 -->
				<property name="poolTimeToWait" value="20000"/>
			</dataSource>

			<!-- 根据JNDI信息拿外部容器实现的数据库连接对象 -->
			<dataSource type="JNDI">
				<!-- 寻找data_source的上下文，可选，忽略时在InitialContext中寻找data_source属性 -->
				<property name="initial_context" value=""/>
				<!-- 引用数据源实例位置上下文的路径 -->
				<property name="data_source" value=""/>

				<!-- 通过点分属性的方式设置数据源的附带属性，可选 -->
				<property name="env.encoding" value="UTF8"/>
			</dataSource>

		</environment>
	</environments>

	<!-- 数据库厂商标识，不常用 -->
	<databaseIdProvider>
		<!-- 此处name是使用的数据库名称，value是其在配置中的别名，例如select或者insert语句中配置databaseId属性 -->
		<property name="Oracle" value="oracle"/>
		<property name="MySQL" value="mysql"/>
		<property name="DB2" value="db2"/>
	</databaseIdProvider>

	<databaseIdProvider type="com.zxf.zxfbatis.simple.provider.MyDatabaseIdProvider">
		<property name="msg" value="自定义DatabaseIdProvider"/>
	</databaseIdProvider>

	<!-- 映射器 -->
	<mappers>
		<!-- 用文件路径引入映射器 -->
		<!-- 指定SQL语句和映射配置文件 -->
		<mapper resource="tk/mybatis/simple/mapper/CountryMapper.xml"/>
		<!-- 使用指定父目录的方式，配置所有的映射xml文件 -->
		<!-- <mapper resource="tk/mybatis/simple/mapper"/> -->


		<!-- 用xml文件指定 -->
		<mapper url="file:///var/mappers/tk/mybatis/simple/mapper/CountryMapper.xml"/>


		<!-- 用包名引入映射器 -->
		<package name="tk/mybatis/simple/mapper"/>


		<!-- 使用类注册引入映射器 -->
		<mapper class="tk/mybatis/simple/mapper/CountryMapper"/>
	</mappers>
</configuration>