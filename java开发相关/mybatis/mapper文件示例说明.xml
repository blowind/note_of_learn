<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mappper对应的命名空间与项目中CoAreaStatusMapper类定义的路径相同 -->
<mapper namespace="com.chuanying.app.dao.CoAreaStatusMapper">

	<!-- 
		id： 为本mapper名空间中引用时的标记 
		type： 配置查询列苏映射到的Java对象类型，需要使用全路径限定名
		extends： 选填，可以配置当前的resultMap继承其他的resultMap，属性值为父resultMap的id
		autoMapping: 选填，配置是否启用非映射字段的自动映射功能，这样不在resultMap中配置的字段也能映射
	-->
	<resultMap id="BaseResultMap" type="com.chuanying.app.model.CoAreaStatusDO">
		<!-- 简单类型的jdbcType可以省略 -->
		<!--
		内部标签类型：
			id：标记结果作为id，代表主链字段
			result： 注入到Java对象属性的普通结果，最常用配置
			association：复杂的类型关联
			collection： 复杂类型的集合
			discriminator：根据结果值来决定使用哪个结果映射
			case： 基于某些值得结果映射

		-->

		<!--  
		id/result属性：
			column： 列名
			property： 属性名
			javaType： 一个Java类的完全限定名或类型别名
			jdbcType： 列对应的数据库类型，对插入、更新、删除操作可能为null的列进行处理
			typeHandler： 覆盖默认的类型处理器，值是类的完全限定名或类型别名
		-->
	    <id column="id" jdbcType="INTEGER" property="id" />
	    <result column="area" jdbcType="VARCHAR" property="area" />
	    <result column="status" jdbcType="TINYINT" property="status" />
	    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />

	    <!-- 指定映射处理表列role_name和属性roleName的处理器MyTypeHandler，
	    	 分别要定义MyTypeHandler类并在mybatis-config.xml文件中配置  -->
	    <!--
	    <result property="roleName" column="role_name" typeHandler="com.zxf.zxfbatis.simple.handler.MyTypeHandler"/> 
		-->
	</resultMap>

	<resultMap id="ArguResultMap" type="com.chuanying.app.model.CoAreaStatusDO">
		<!-- 
		constructor： 通过构造方法注入属性的结果值，构造方法中的idArg, arg分别对应resultMap中的id、result标签 
			idArg： id参数，标记结果作为id
			arg：   注入到构造方法的一个普通结果
		-->
	</resultMap>

	<!-- 查找对应的列名字段，一般来说是包含全部字段，因此没什么条件判断 -->
	<sql id="sql_column_list">
		id
		,area
		,status
		,created_at
	</sql>

	<!-- 
		id：属性值要求与接口中的方法名一致，否则MyBatis无法匹配。由于id在同一个命名空间（基本等价于xml文件中）不可重复，因此存在接口中多个重载的同名方法对应同一个select配置的情况
		parameterType:给出类的全限定名或者别名，将Java Bean、Map等简单的参数类型传给SQL
		resultType：定义当前查询的返回值类型，一般要全限定名，如果是自定义类型并且在config中指定了前缀，可以直接用类名，与resultMap互斥
		resultMap：配置Java对象的属性和查询结果列的对应关系
		flushCache：调用SQL后，是否要求MyBatis清空之前查询本地缓存和二级缓存，默认为false
		useCache：启动二级缓存的开关，是否要求MyBatis将此次结果缓存，默认为true
		timeout：查询超时参数，单位为秒，默认为数据库厂商提供的JDBC驱动设置的秒数
		fetchSize：获取记录的总条数设定，默认为数据库厂商提供的JDBC驱动设置的条数

	 -->
	<select id="findEnabledAreas" parameterType="java.util.Map" resultType="java.lang.String">
	    SELECT area
	    FROM co_area_status
	    WHERE status = #{status}
	</select>
	<select id="countUserByFirstName" parameterType="string" resultType="int">
		select count(*) total from t_user
		where user_name like concat(#{firstName}, '%')
	</select>


	<!-- 多参数传递： -->
	<!-- 使用Map接口传递多个参数，适用几乎所有场景，但不推荐
		 对应接口为: public List<Role> findRolesByMap(Map<String, Object> paramterMap);  -->
	<select id="firstRolesByMap" parameterType="map" resultType="role">
		select id, role_name as roleName, note from t_role
		where role_name like concat('%', #{roleName}, '%')
		and note like concat('%', #{note}, '%')
	</select>

	<!-- 使用注解传递多个参数，此处不需给出parameterType配置
	     对应接口为： public List<Role> findRoleByAnnotation(@Param("roleName") String roleName, @Param("note") String note); -->
    <select id="findRoleByAnnotation" resultType="role">
		select id, role_name as roleName, note from t_role
		where role_name like concat('%', #{roleName}, '%')
		and note like concat('%', #{note}, '%')
	</select>

	<!-- 使用Java Bean传递多个参数，应对参数过多（一般大于等于5）的情况
	     对应接口为： public List<Role> findRolesByBean(RoleParams roleParams); -->
	<select id="findRolesByBean" parameterType="com.zxf.zxfbatis.simple.dao.RoleParams" resultType="role">
		select id, role_name as roleName, note from t_role
		where role_name like concat('%', #{roleName}, '%')
		and note like concat('%', #{note}, '%')
	</select>

	<!-- 混合前两种情况，即使用点分属性引用每个Java对象的属性
	     对应接口为： public List<Role> findByMix(@Param("params") RoleParams roleParams, @Param("page") PageParam pageParam); -->
	<select id="findByMix" resultType="role">
		select id, role_name as roleName, note from t_role
		where role_name like concat('%', #{params.roleName}, '%')
		and note like concat('%', #{params.note}, '%')
		limit #{page.start}, #{page.limit}
	</select>

	<!--使用MyBatis内置分页功能（RowBounds类）
	    对应接口：List<Country> findByRowBounds(@Param("id") Integer id, RowBounds rowBounds);
	    注意：
	    1、 接口中要带RowBounds参数，但是SQL中不用带，MyBatis会自动处理
	    2、 只能运用于一些小数据量的查询，对大量数据查询性能不佳，建议通过分页插件处理 -->
	<select id="findByRowBounds" resultType="com.zxf.zxfbatis.simple.model.Country">
		SELECT * FROM country WHERE <![CDATA[ id > #{id} ]]>
	</select>


	<!-- 注意对比resultMap和resultType的差异，resultType需要在返回结果用使用别名来保证列名与Java对象域变量名一模一样
		 若配置了mapUnderscoreToCamelCase设置为true，则下划线转驼峰的映射可以省略别名
	 -->
	<select id="selectByIdMap" resultMap="BaseResultMap">
		SELECT * FROM co_area_status where id = #{id}
	</select>
	<!-- 返回列名与对象属性名完全一致（达到自动映射的目的）时，或者返回的是一个基本类型的对象形式时，可以用resultType -->
	<select id="selectByIdType" resultType="com.chuanying.app.model.CoAreaStatus"> 
		select id,
			area,
			status,
			created_at createdAt
		from co_area_status where id = #{id}
	</select>

	<!-- 对象作为字段的（此处是SysUser对象作为SysRole类的字段），
	     相关并表查询（sys_user/sys_role/sys_user_role三张表）的映射写法，不常用不推荐 -->
	<select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
		SELECT r.id,
			   r.role_name roleName,
			   r.enabled,
			   r.create_by createBy,
			   r.create_time createTime,
			   u.user_name as "user.userName",
			   u.user_email as "user.userEmail"
		FROM sys_user u
		INNER JOIN sys_user_role ur ON u.id = ur.user_id
		INNER JOIN sys_role On ur.role_id = r.id
		WHERE u.id = #{userId}
	</select>

	
	时间类型的对应关系：
	JAVA                      JDBC类型/MYBATIS        MYSQL
	java.util.Date                 DATE               date
	java.util.Date                 TIME               time
	java.util.Date               TIMESTAMP           datetime

	<!-- 	
	id： 命名空间汇总的唯一标识
	parameterType： 传入的语句参数的完全限定名或别名，MyBatis可以自行推断，不建议配置
	flushCache： 默认true，只要语句被调用，就清空一级和二级缓存
	timeout： 抛出异常前，驱动程序等待数据库返回结果的秒数
	statementType： 对STATEMENT、PREPARED、CALLABLE分别使用默认的Statement、PreparedStatement、CallableStatement

	主键回填：
	useGeneratedKeys：默认false。置为true时使用JDBC的getGeneratedKeys方法取出数据库内部生成的主键（新增数据后使用主键id进行关联的场景）
	以下两个配置仅对INSERT和UPDATE有效：
	keyProperty： 指定getGeneratedKeys方法获取的主键赋值的属性名，即MyBatis把插入后新生成的主键回填到Bean里哪个属性，多个主键用逗号
	分隔
	keyColumn： 。生成的键值设置表中的列名，当主键列不是表中第一列时需要设置，复合主键使用逗号分隔


	databaseId：配了databaseIdProvider时，加载所有不带databaseId或者匹配当前databaseId的语句 

	insert返回的类型int是执行SQL影响的行数，一般是插入成功数
	-->
	<insert id="insert">
		INSERT INTO sys_user(id, user_name, user_password, user_email, head_img, create_time)
		       VALUES (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
	</insert>
	<!-- 使用插入后生成的主键id回填到Role对象中，用于后续处理 -->
	<insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO t_role(role_name, note) VALUES (#{roleName}, #{note})
	</insert>


	<!-- 注意此处的类型string是在xml配置文件的typeHandler中定义的映射类型，此处显示其应用
	     指定javaType和jdbcType，mybatis自动匹配handler进行处理 -->
	<select id="findRoles" parameterType="string" resultMap="roleMapper">
		select id, role_name, note from t_role
		where role_name like concat('%', #{roleName, jdbcType=VARCHAR, javaType=string}, '%')
	</select>
	<!-- 指定MyTypeHandler作为处理类型映射关系的类，
		 用于数据库返回为空无法判定采用哪个typeHandler，
		 又没有在xml或代码中注册对应的javaType的typeHandler时使用 -->
	<select id="findRoles2" parameterType="string" resultMap="roleMapper">
		select id, role_name, note from t_role
		where note like concat('%', #{note, typeHandler=com.zxf.zxfbatis.simple.handler.MyTypeHandler}, '%')
	</select>



	<!-- 使用ibatis自带的枚举处理器EnumOrdinalTypeHandler映射到自定义枚举类型SexEnum，
		 此时数据库中存储的是数字类型integer，即SexEnum中各个类型的下标(从上到下以0开始计数)
		 弊端：下标数值可能与枚举类型中自己定义的索引数值不一致 -->
	<resultMap id="userMapper" type="user">
		<result property="id" column="id"/>
		<result property="username" column="user_name"/>
		<result property="sex" column="sex" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
	</resultMap>

	<!-- 使用ibatis自带的枚举处理器EnumTypeHandler映射到自定义枚举类型SexEnum，
		 此时数据库中存储的是字符类型VARCHAR，即SexEnum中的枚举项的名字
		 在java对象中的类型转换，使用Enum.valueOf(SexEnum.class, "MALE")得到，其中MALE是数据库中存储的枚举字符串 -->
	<resultMap id="userMapper" type="user">
		<result property="id" column="id"/>
		<result property="username" column="user_name"/>
		<result property="sex" column="sex" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>
	</resultMap>

	<!-- 使用自定义的枚举处理器SexEnumTypeHandler映射到自定义枚举类型SexEnum，
		 此时数据库中存储的是数字类型integer，即SexEnum中各个枚举类型的id值（通过SexEnumTypeHandler实现的接口函数指定）
		 推荐的枚举映射用法 -->
	<resultMap id="userMapper" type="user">
		<result property="id" column="id"/>
		<result property="username" column="user_name"/>
		<result property="sex" column="sex" typeHandler="com.zxf.zxfbatis.simple.handler.SexEnumTypeHandler"/>
	</resultMap>


	<!-- 二进制的文件内容存数据库，不推荐使用，可以使用专门的文件服务器 -->
	<resultMap id="file" type="com.ssm.chapter5.pojo.TestFile">
		<id column="id" property="id"/>
		<!-- 处理数据库列为blob类型，类属性为byte[]的列，一般这种格式转换能默认匹配，不用在typeHandler中显示指定 -->
		<result column="content" property="content" typeHandler="org.apache.ibatis.type.BlobTypeHandler"/>
	</resultMap>

	<!-- 二进制的文件内容存数据库，不推荐使用，可以使用专门的文件服务器 -->
	<resultMap id="file" type="com.ssm.chapter5.pojo.TestFile">
		<id column="id" property="id"/>
		<!-- 处理数据库列为blob类型，类属性为InputStream的列 -->
		<result column="content" property="content" typeHandler="org.apache.ibatis.type.BlobInputStreamTypeHandler"/>
	</resultMap>

	<!-- 调用类的静态函数的静态方法根据条件生成数值，用作数据表名的拼接，
      	 注意拼接类型只能是数字，不能是字符串(字符串会报错) -->
	<select id="getDayDetailByIdCode" resultMap="BaseResultMap">
        SELECT user_id, coin_code, amount_sign, handle_type, sum(amount) as amount
        FROM
      <choose>
        <when test="userId != null and userId != '' and userId lt 1000 and userId gt 0">
          <bind name="tableId" value='@com.chuanying.eoe.match.utils.DateIndicator@getDayIndexOfYear()'/>
          <choose>
            <when test="tableId lt 10">
              account_detail_rbt_00#{tableId}
            </when>
            <when test="tableId lt 100">
              account_detail_rbt_0#{tableId}
            </when>
            <otherwise>
              account_detail_rbt_#{tableId}
            </otherwise>
          </choose>
        </when>
        <otherwise>
          account_detail
        </otherwise>
      </choose>
        WHERE date(create_time) = date(date_add(now(), interval -1 day))
        GROUP BY user_id, coin_code, amount_sign, handle_type
    </select>

    <!-- 同上，使用工具类静态函数生成条件变量用于数据库选择 -->
    <insert id="migrateRobotDataByDay">
        <bind name="tableId" value='@com.chuanying.eoe.match.util.DateIndicator@getMonthIndexOfYear()'/>
        INSERT INTO trade_entrust_detail_rbt_bak_#{tableId}
        (SELECT * FROM trade_entrust_detail_rbt
        WHERE date_format(create_time,'%Y-%m-%d') = date_format(#{day}, '%Y-%m-%d') LIMIT #{pageSize} OFFSET (#{pageNum} - 1) * #{pageSize})
    </insert>

    <!-- 展示databaseId数据库厂商标志的使用，需要与mybatis-config.xml中的databaseIdProvider配置配合
         不配置databaseId的SQL会被当做默认值，当没有最佳匹配时运行，若所有语句都有配置但与实际数据库不一致，抛出异常 -->
    <select id="getRole" parameterType="Long" resultType="role" databaseId="oracle">
    	select id, role_name as roleName, note from t_role where id = #{id}
    </select>
    <select id="getRole" parameterType="Long" resultType="role" databaseId="mysql">
    	select id, role_name as roleName, note from t_role where id = #{id}
    </select>


</mapper>